import { Redis } from 'ioredis';
import { restoreRedisData } from '../../../restoreRedisData.js';
import { logger } from '../logger.js';
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
console.log('ENV Variables:', {
    REDIS_URL: process.env.REDIS_URL,
    NODE_ENV: process.env.NODE_ENV,
});
if (!process.env.REDIS_URL) {
    console.error('‚ùå REDIS_URL is not defined in environment variables');
    process.exit(1);
}
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π BullMQ
const redisOptions = {
    connectTimeout: 5000,
    maxRetriesPerRequest: null, // –í–∞–∂–Ω–æ! –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ BullMQ
    enableReadyCheck: false, // –í–∞–∂–Ω–æ! –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ BullMQ
    retryStrategy: (times) => {
        const delay = Math.min(times * 50, 2000);
        console.warn(`Retrying connection after ${delay}ms (${times} attempt(s))`);
        return delay;
    },
};
// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Redis
const redis = new Redis(process.env.REDIS_URL, redisOptions);
// –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
redis.on('connect', () => console.log('‚úÖ Connected to Redis'));
redis.on('end', () => logger.warn('Redis connection closed'));
redis.on('error', err => console.error('‚ùå Redis error:', err));
redis.on('reconnecting', () => console.warn('üîÑ Reconnecting to Redis'));
redis.on('ready', async () => {
    console.log('üëç Redis ready');
    if (process.env.NODE_ENV !== 'production') {
        try {
            await restoreRedisData(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        }
        catch (error) {
            console.error('Redis restore failed:', error);
        }
    }
});
export default redis;
