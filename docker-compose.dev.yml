services:
  postgres:
    image: postgres:15
    container_name: postgres-dev
    env_file: .env.dev
    ports:
      - '5432:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d blogdb']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis-dev
    command:
      - redis-server
      - --save 60 1                # Сохранять раз в минуту, если есть изменения
      - --maxmemory 256mb            # Лимит памяти
      - --maxmemory-policy noeviction # Удалять ключи с ближайшим истечен TTL
      # - --appendonly yes             # Включить AOF для лучшей персистентности
      # - --appendfilename "appendonly.aof"  # Имя AOF файла
      # - --dir /data                  # Путь к данным
    volumes:
      - redis_data:/data            # Монтируем том для RDB/AOF
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight-dev
    ports:
      - '8001:5540' # Проброс порта 5540 из контейнера на 8001 хоста
    volumes:
      - redisinsight_data:/db # Для сохранения данных RedisInsight
    environment:
      - REDISINSIGHT_HOST=0.0.0.0 # Чтобы слушал на всех интерфейсах
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

  minio:
    image: minio/minio
    container_name: minio-dev
    command: server /data --console-address ":9001"
    env_file: .env.dev
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

 
volumes:
  pg_data:
  minio_data:
  redisinsight_data:
  redis_data:
  # grafana-storage:
