services:
  postgres:
    image: postgres:15
    container_name: postgres-dev
    env_file: .env.dev
    ports:
      - '5432:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d blogdb']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis-dev
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight-dev
    ports:
      - '8001:5540' # Проброс порта 5540 из контейнера на 8001 хоста
    volumes:
      - redisinsight_data:/db # Для сохранения данных RedisInsight
    environment:
      - REDISINSIGHT_HOST=0.0.0.0 # Чтобы слушал на всех интерфейсах
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

  minio:
    image: minio/minio
    container_name: minio-dev
    command: server /data --console-address ":9001"
    env_file: .env.dev
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog-dev
    ports:
      - '1025:1025' # SMTP порт
      - '8025:8025' # Web интерфейс
    restart: unless-stopped
    networks:
      default:
        aliases:
          - mailhog
          
  prometheus:
    image: prom/prometheus
    container_name: prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

      
  loki:
    image: grafana/loki:latest
    container_name: loki-dev
    ports:
      - "3100:3100"
    volumes:
      - ./deploy/monitoring/loki:/etc/loki
    command: 
    - "-config.file=/etc/loki/loki-config.yaml"
    - "-validation.allow-structured-metadata=false"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dev
    ports:
      - "3000:3000"
    volumes:
      - ./deploy/monitoring/grafana:/etc/grafana/provisioning
    depends_on: [loki, prometheus]


volumes:
  pg_data:
  minio_data:
  redisinsight_data:
  grafana-storage:
