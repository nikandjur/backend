generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
  output        = "../node_modules/.prisma/client" // Явно указываем путь
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  avatarUrl     String?
  bio           String?
  website       String?
  emailVerified DateTime?
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        String
  posts         Post[]
  comments      Comment[] // Добавлена обратная связь
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  posts     PostTag[]
  createdAt DateTime  @default(now())
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])
  postId String
  tagId  String

  @@id([postId, tagId])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String?
  likes     Int       @default(0)
  views     Int       @default(0)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  tags      PostTag[]
  comments  Comment[] // Добавлена обратная связь
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([title, content], map: "post_title_content_idx")
  
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}
