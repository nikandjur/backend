generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  avatarUrl     String?
  bio           String?
  website       String?
  emailVerified DateTime?
  roleId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  posts         Post[]
  role          Role      @relation(fields: [roleId], references: [id])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Post {
  id            String    @id @default(cuid())
  title         String
  content       String?
  views         Int       @default(0)
  authorId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  commentsCount Int       @default(0)
  likesCount    Int       @default(0)
  comments      Comment[]
  author        User      @relation(fields: [authorId], references: [id])
  tags          Tag[]     @relation("PostToTag")

  @@index([title, content], map: "post_title_content_idx")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]   @relation("PostToTag")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
}
