/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Main API
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ—Å—Ç–∞–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Comment,
  CommentCreate
} from '.././model';





/**
 * @summary –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 */
export const postApiPostsPostIdComments = (
    postId: string,
    commentCreate: CommentCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Comment>> => {
    
    
    return axios.post(
      `/api/posts/${postId}/comments`,
      commentCreate,options
    );
  }



export const getPostApiPostsPostIdCommentsMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPostsPostIdComments>>, TError,{postId: string;data: CommentCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPostsPostIdComments>>, TError,{postId: string;data: CommentCreate}, TContext> => {

const mutationKey = ['postApiPostsPostIdComments'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPostsPostIdComments>>, {postId: string;data: CommentCreate}> = (props) => {
          const {postId,data} = props ?? {};

          return  postApiPostsPostIdComments(postId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPostsPostIdCommentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPostsPostIdComments>>>
    export type PostApiPostsPostIdCommentsMutationBody = CommentCreate
    export type PostApiPostsPostIdCommentsMutationError = AxiosError<void>

    /**
 * @summary –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 */
export const usePostApiPostsPostIdComments = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPostsPostIdComments>>, TError,{postId: string;data: CommentCreate}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPostsPostIdComments>>,
        TError,
        {postId: string;data: CommentCreate},
        TContext
      > => {

      const mutationOptions = getPostApiPostsPostIdCommentsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
 */
export const getApiPostsPostIdComments = (
    postId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Comment[]>> => {
    
    
    return axios.get(
      `/api/posts/${postId}/comments`,options
    );
  }


export const getGetApiPostsPostIdCommentsQueryKey = (postId: string,) => {
    return [`/api/posts/${postId}/comments`] as const;
    }

    
export const getGetApiPostsPostIdCommentsQueryOptions = <TData = Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError = AxiosError<void>>(postId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPostsPostIdCommentsQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPostsPostIdComments>>> = ({ signal }) => getApiPostsPostIdComments(postId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPostsPostIdCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPostsPostIdComments>>>
export type GetApiPostsPostIdCommentsQueryError = AxiosError<void>


export function useGetApiPostsPostIdComments<TData = Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError = AxiosError<void>>(
 postId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPostsPostIdComments>>,
          TError,
          Awaited<ReturnType<typeof getApiPostsPostIdComments>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPostsPostIdComments<TData = Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError = AxiosError<void>>(
 postId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPostsPostIdComments>>,
          TError,
          Awaited<ReturnType<typeof getApiPostsPostIdComments>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPostsPostIdComments<TData = Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError = AxiosError<void>>(
 postId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
 */

export function useGetApiPostsPostIdComments<TData = Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError = AxiosError<void>>(
 postId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsPostIdComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPostsPostIdCommentsQueryOptions(postId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 */
export const deleteApiCommentsId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.delete(
      `/api/comments/${id}`,options
    );
  }



export const getDeleteApiCommentsIdMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCommentsId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCommentsId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiCommentsId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCommentsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiCommentsId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCommentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCommentsId>>>
    
    export type DeleteApiCommentsIdMutationError = AxiosError<void>

    /**
 * @summary –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 */
export const useDeleteApiCommentsId = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCommentsId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiCommentsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiCommentsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    