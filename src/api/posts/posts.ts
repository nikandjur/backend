/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Main API
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ—Å—Ç–∞–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetApiPostsSearchParams,
  GetApiPostsTopParams,
  GetApiUserUserIdPosts200Item,
  GetApiUserUserIdPostsParams,
  Post,
  PostCreate,
  PostUpdate
} from '.././model';





/**
 * @summary –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
 */
export const postApiPosts = (
    postCreate: PostCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post>> => {
    
    
    return axios.post(
      `/api/posts`,
      postCreate,options
    );
  }



export const getPostApiPostsMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPosts>>, TError,{data: PostCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPosts>>, TError,{data: PostCreate}, TContext> => {

const mutationKey = ['postApiPosts'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPosts>>, {data: PostCreate}> = (props) => {
          const {data} = props ?? {};

          return  postApiPosts(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPostsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPosts>>>
    export type PostApiPostsMutationBody = PostCreate
    export type PostApiPostsMutationError = AxiosError<void>

    /**
 * @summary –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
 */
export const usePostApiPosts = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPosts>>, TError,{data: PostCreate}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPosts>>,
        TError,
        {data: PostCreate},
        TContext
      > => {

      const mutationOptions = getPostApiPostsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
 */
export const getApiPostsSearch = (
    params: GetApiPostsSearchParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post[]>> => {
    
    
    return axios.get(
      `/api/posts/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiPostsSearchQueryKey = (params: GetApiPostsSearchParams,) => {
    return [`/api/posts/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiPostsSearchQueryOptions = <TData = Awaited<ReturnType<typeof getApiPostsSearch>>, TError = AxiosError<void>>(params: GetApiPostsSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsSearch>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPostsSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPostsSearch>>> = ({ signal }) => getApiPostsSearch(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPostsSearch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPostsSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPostsSearch>>>
export type GetApiPostsSearchQueryError = AxiosError<void>


export function useGetApiPostsSearch<TData = Awaited<ReturnType<typeof getApiPostsSearch>>, TError = AxiosError<void>>(
 params: GetApiPostsSearchParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsSearch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPostsSearch>>,
          TError,
          Awaited<ReturnType<typeof getApiPostsSearch>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPostsSearch<TData = Awaited<ReturnType<typeof getApiPostsSearch>>, TError = AxiosError<void>>(
 params: GetApiPostsSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsSearch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPostsSearch>>,
          TError,
          Awaited<ReturnType<typeof getApiPostsSearch>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPostsSearch<TData = Awaited<ReturnType<typeof getApiPostsSearch>>, TError = AxiosError<void>>(
 params: GetApiPostsSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsSearch>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
 */

export function useGetApiPostsSearch<TData = Awaited<ReturnType<typeof getApiPostsSearch>>, TError = AxiosError<void>>(
 params: GetApiPostsSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsSearch>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPostsSearchQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ—Å—Ç–æ–≤
 */
export const getApiPostsTop = (
    params?: GetApiPostsTopParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post[]>> => {
    
    
    return axios.get(
      `/api/posts/top`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiPostsTopQueryKey = (params?: GetApiPostsTopParams,) => {
    return [`/api/posts/top`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiPostsTopQueryOptions = <TData = Awaited<ReturnType<typeof getApiPostsTop>>, TError = AxiosError<unknown>>(params?: GetApiPostsTopParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsTop>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPostsTopQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPostsTop>>> = ({ signal }) => getApiPostsTop(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPostsTop>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPostsTopQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPostsTop>>>
export type GetApiPostsTopQueryError = AxiosError<unknown>


export function useGetApiPostsTop<TData = Awaited<ReturnType<typeof getApiPostsTop>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiPostsTopParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsTop>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPostsTop>>,
          TError,
          Awaited<ReturnType<typeof getApiPostsTop>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPostsTop<TData = Awaited<ReturnType<typeof getApiPostsTop>>, TError = AxiosError<unknown>>(
 params?: GetApiPostsTopParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsTop>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPostsTop>>,
          TError,
          Awaited<ReturnType<typeof getApiPostsTop>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPostsTop<TData = Awaited<ReturnType<typeof getApiPostsTop>>, TError = AxiosError<unknown>>(
 params?: GetApiPostsTopParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsTop>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ—Å—Ç–æ–≤
 */

export function useGetApiPostsTop<TData = Awaited<ReturnType<typeof getApiPostsTop>>, TError = AxiosError<unknown>>(
 params?: GetApiPostsTopParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsTop>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPostsTopQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø–æ—Å—Ç—É
 */
export const postApiPostsIdLike = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/api/posts/${id}/like`,undefined,options
    );
  }



export const getPostApiPostsIdLikeMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPostsIdLike>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPostsIdLike>>, TError,{id: string}, TContext> => {

const mutationKey = ['postApiPostsIdLike'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPostsIdLike>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  postApiPostsIdLike(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPostsIdLikeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPostsIdLike>>>
    
    export type PostApiPostsIdLikeMutationError = AxiosError<void>

    /**
 * @summary –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø–æ—Å—Ç—É
 */
export const usePostApiPostsIdLike = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPostsIdLike>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPostsIdLike>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPostApiPostsIdLikeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID
 */
export const getApiPostsId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post>> => {
    
    
    return axios.get(
      `/api/posts/${id}`,options
    );
  }


export const getGetApiPostsIdQueryKey = (id: string,) => {
    return [`/api/posts/${id}`] as const;
    }

    
export const getGetApiPostsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPostsId>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPostsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPostsId>>> = ({ signal }) => getApiPostsId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPostsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPostsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPostsId>>>
export type GetApiPostsIdQueryError = AxiosError<void>


export function useGetApiPostsId<TData = Awaited<ReturnType<typeof getApiPostsId>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPostsId>>,
          TError,
          Awaited<ReturnType<typeof getApiPostsId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPostsId<TData = Awaited<ReturnType<typeof getApiPostsId>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPostsId>>,
          TError,
          Awaited<ReturnType<typeof getApiPostsId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPostsId<TData = Awaited<ReturnType<typeof getApiPostsId>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID
 */

export function useGetApiPostsId<TData = Awaited<ReturnType<typeof getApiPostsId>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPostsId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPostsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç
 */
export const patchApiPostsId = (
    id: string,
    postUpdate: PostUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post>> => {
    
    
    return axios.patch(
      `/api/posts/${id}`,
      postUpdate,options
    );
  }



export const getPatchApiPostsIdMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiPostsId>>, TError,{id: string;data: PostUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiPostsId>>, TError,{id: string;data: PostUpdate}, TContext> => {

const mutationKey = ['patchApiPostsId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiPostsId>>, {id: string;data: PostUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiPostsId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiPostsIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiPostsId>>>
    export type PatchApiPostsIdMutationBody = PostUpdate
    export type PatchApiPostsIdMutationError = AxiosError<void>

    /**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç
 */
export const usePatchApiPostsId = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiPostsId>>, TError,{id: string;data: PostUpdate}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiPostsId>>,
        TError,
        {id: string;data: PostUpdate},
        TContext
      > => {

      const mutationOptions = getPatchApiPostsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
 */
export const deleteApiPostsId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/posts/${id}`,options
    );
  }



export const getDeleteApiPostsIdMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPostsId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiPostsId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiPostsId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiPostsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiPostsId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiPostsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPostsId>>>
    
    export type DeleteApiPostsIdMutationError = AxiosError<void>

    /**
 * @summary –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
 */
export const useDeleteApiPostsId = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPostsId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiPostsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiPostsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export const getApiUserUserIdPosts = (
    userId: string,
    params?: GetApiUserUserIdPostsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiUserUserIdPosts200Item[]>> => {
    
    
    return axios.get(
      `/api/user/${userId}/posts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiUserUserIdPostsQueryKey = (userId: string,
    params?: GetApiUserUserIdPostsParams,) => {
    return [`/api/user/${userId}/posts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUserUserIdPostsQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError = AxiosError<void>>(userId: string,
    params?: GetApiUserUserIdPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserUserIdPostsQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserUserIdPosts>>> = ({ signal }) => getApiUserUserIdPosts(userId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserUserIdPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserUserIdPosts>>>
export type GetApiUserUserIdPostsQueryError = AxiosError<void>


export function useGetApiUserUserIdPosts<TData = Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError = AxiosError<void>>(
 userId: string,
    params: undefined |  GetApiUserUserIdPostsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserUserIdPosts>>,
          TError,
          Awaited<ReturnType<typeof getApiUserUserIdPosts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserUserIdPosts<TData = Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError = AxiosError<void>>(
 userId: string,
    params?: GetApiUserUserIdPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserUserIdPosts>>,
          TError,
          Awaited<ReturnType<typeof getApiUserUserIdPosts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserUserIdPosts<TData = Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError = AxiosError<void>>(
 userId: string,
    params?: GetApiUserUserIdPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */

export function useGetApiUserUserIdPosts<TData = Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError = AxiosError<void>>(
 userId: string,
    params?: GetApiUserUserIdPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserIdPosts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserUserIdPostsQueryOptions(userId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



