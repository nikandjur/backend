/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Main API
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ—Å—Ç–∞–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  PutApiUserProfile200,
  PutApiUserProfileBody,
  UserProfile
} from '.././model';





/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const putApiUserProfile = (
    putApiUserProfileBody: PutApiUserProfileBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutApiUserProfile200>> => {
    
    
    return axios.put(
      `/api/user/profile`,
      putApiUserProfileBody,options
    );
  }



export const getPutApiUserProfileMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserProfile>>, TError,{data: PutApiUserProfileBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserProfile>>, TError,{data: PutApiUserProfileBody}, TContext> => {

const mutationKey = ['putApiUserProfile'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserProfile>>, {data: PutApiUserProfileBody}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserProfile(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUserProfileMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserProfile>>>
    export type PutApiUserProfileMutationBody = PutApiUserProfileBody
    export type PutApiUserProfileMutationError = AxiosError<void>

    /**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePutApiUserProfile = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserProfile>>, TError,{data: PutApiUserProfileBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUserProfile>>,
        TError,
        {data: PutApiUserProfileBody},
        TContext
      > => {

      const mutationOptions = getPutApiUserProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 */
export const getApiUserUserId = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfile>> => {
    
    
    return axios.get(
      `/api/user/${userId}`,options
    );
  }


export const getGetApiUserUserIdQueryKey = (userId: string,) => {
    return [`/api/user/${userId}`] as const;
    }

    
export const getGetApiUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<void>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserUserId>>> = ({ signal }) => getApiUserUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserUserId>>>
export type GetApiUserUserIdQueryError = AxiosError<void>


export function useGetApiUserUserId<TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<void>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserUserId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserUserId<TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<void>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserUserId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserUserId<TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<void>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 */

export function useGetApiUserUserId<TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<void>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



